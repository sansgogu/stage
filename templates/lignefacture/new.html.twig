<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create New Invoice Line Item</title>
    
    <!-- Bootstrap 5 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <style>
        :root {
            --primary: #4361ee;
            --secondary: #3f37c9;
            --light-bg: #f8f9fa;
            --card-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            --gradient: linear-gradient(120deg, var(--primary), var(--secondary));
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            background-color: #f5f7fb;
            color: #333;
            padding-bottom: 2rem;
        }
        
        .page-header {
            background: var(--gradient);
            color: white;
            padding: 2rem 0;
            margin-bottom: 2rem;
            border-radius: 0 0 15px 15px;
            box-shadow: 0 4px 12px rgba(67, 97, 238, 0.15);
        }
        
        .card {
            border: none;
            border-radius: 12px;
            box-shadow: var(--card-shadow);
            margin-bottom: 1.5rem;
        }
        
        .card-header {
            background-color: white;
            border-bottom: 1px solid rgba(0,0,0,0.05);
            font-weight: 600;
            padding: 1.2rem 1.5rem;
            border-radius: 12px 12px 0 0 !important;
        }
        
        .btn-primary {
            background: var(--gradient);
            border: none;
            border-radius: 8px;
            padding: 12px 25px;
            font-weight: 500;
            transition: all 0.3s;
            box-shadow: 0 4px 12px rgba(67, 97, 238, 0.2);
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 15px rgba(67, 97, 238, 0.3);
        }
        
        .btn-outline-secondary {
            border-radius: 8px;
            padding: 12px 25px;
            font-weight: 500;
            transition: all 0.3s;
        }
        
        .btn-outline-secondary:hover {
            transform: translateY(-2px);
        }
        
        .form-control, .form-select {
            border-radius: 8px;
            padding: 12px 15px;
            border: 1px solid #e2e8f0;
            transition: all 0.3s;
        }
        
        .form-control:focus, .form-select:focus {
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
            border-color: var(--primary);
        }
        
        .form-label {
            font-weight: 500;
            margin-bottom: 0.5rem;
            color: #2d3748;
        }
        
        .action-buttons {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }
        
        .required-field::after {
            content: "*";
            color: #e53e3e;
            margin-left: 4px;
        }
        
        @media (max-width: 576px) {
            .action-buttons {
                flex-direction: column;
            }
            
            .action-buttons .btn {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <!-- Header Section -->
    <div class="page-header">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h1 class="h3 mb-0"><i class="bi bi-plus-circle me-2"></i>Create New Invoice Line Item</h1>
                    <p class="mb-0 opacity-75">Add a new item to your invoice</p>
                </div>
                <div class="col-md-4 text-md-end">
                    <a href="{{ path('app_lignefacture_index') }}" class="btn btn-light">
                        <i class="bi bi-arrow-left me-2"></i> Back to List
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <!-- Create Form Card -->
                <div class="card">
                    <div class="card-header">
                        <i class="bi bi-receipt me-2"></i> Item Details
                    </div>
                    <div class="card-body">
                        {{ include('lignefacture/_form.html.twig') }}
                    </div>
                </div>
                
                <!-- Back Button Card -->
                <div class="card">
                    <div class="card-body text-center">
                        <a href="{{ path('app_lignefacture_index') }}" class="btn btn-outline-secondary">
                            <i class="bi bi-arrow-left me-2"></i> Back to List
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Enhance form controls with Bootstrap styling
        document.addEventListener('DOMContentLoaded', function() {
            // Add form-label class to all labels
            const labels = document.querySelectorAll('form label');
            labels.forEach(label => {
                label.classList.add('form-label');
                
                // Add required indicator if field is required
                const input = document.querySelector(`#${label.getAttribute('for')}`);
                if (input && input.hasAttribute('required')) {
                    label.classList.add('required-field');
                }
            });
            
            // Add form-control class to all inputs, selects and textareas
            const inputs = document.querySelectorAll('form input:not([type="checkbox"]):not([type="radio"]), form select, form textarea');
            inputs.forEach(input => {
                input.classList.add('form-control');
                
                // Add real-time calculation for total price if quantity or unit price changes
                if (input.name.includes('qte') || input.name.includes('prixunitaire')) {
                    input.addEventListener('input', calculateTotalPrice);
                }
            });
            
            // Add form-check class to checkboxes and radios
            const checkboxes = document.querySelectorAll('form input[type="checkbox"], form input[type="radio"]');
            checkboxes.forEach(checkbox => {
                checkbox.classList.add('form-check-input');
                if (checkbox.closest('div')) {
                    checkbox.closest('div').classList.add('form-check');
                }
            });
            
            // Style the submit button
            const submitBtn = document.querySelector('form button[type="submit"]');
            if (submitBtn) {
                submitBtn.classList.add('btn', 'btn-primary', 'mt-4', 'w-100');
                submitBtn.innerHTML = '<i class="bi bi-check-circle me-2"></i> ' + submitBtn.textContent;
            }
            
            // Add help text for form fields
            addFormHelpText();
            
            // Initialize total price calculation
            calculateTotalPrice();
        });
        
        // Function to calculate total price based on quantity and unit price
        function calculateTotalPrice() {
            const quantity = document.querySelector('input[name*="qte"]') ? parseFloat(document.querySelector('input[name*="qte"]').value) || 0 : 0;
            const unitPrice = document.querySelector('input[name*="prixunitaire"]') ? parseFloat(document.querySelector('input[name*="prixunitaire"]').value) || 0 : 0;
            const totalPrice = quantity * unitPrice;
            
            // Update total price field if it exists
            const totalField = document.querySelector('input[name*="prixtotale"]');
            if (totalField) {
                totalField.value = totalPrice.toFixed(2);
                
                // Visual indicator when total is calculated
                if (quantity > 0 && unitPrice > 0) {
                    totalField.style.backgroundColor = 'rgba(76, 201, 240, 0.1)';
                    setTimeout(() => {
                        totalField.style.backgroundColor = '';
                    }, 1000);
                }
            }
            
            // Show calculated total to user
            const totalDisplay = document.getElementById('calculated-total');
            if (!totalDisplay) {
                const totalDiv = document.createElement('div');
                totalDiv.id = 'calculated-total';
                totalDiv.className = 'alert alert-info mt-3';
                totalDiv.innerHTML = `<strong>Calculated Total: $${totalPrice.toFixed(2)}</strong>`;
                
                const totalFieldContainer = document.querySelector('input[name*="prixtotale"]').closest('.form-group') || 
                                           document.querySelector('input[name*="prixtotale"]').closest('.mb-3');
                if (totalFieldContainer) {
                    totalFieldContainer.appendChild(totalDiv);
                }
            } else {
                totalDisplay.innerHTML = `<strong>Calculated Total: $${totalPrice.toFixed(2)}</strong>`;
            }
        }
        
        // Function to add help text for form fields
        function addFormHelpText() {
            const fieldHelp = {
                'referencedeproduit': 'Enter the product SKU or reference code',
                'nomDeProduit': 'Enter the complete product name',
                'qte': 'Enter the quantity of items',
                'prixunitaire': 'Enter the price per unit',
                'prixtotale': 'This field is automatically calculated based on quantity and unit price'
            };
            
            for (const fieldName in fieldHelp) {
                const input = document.querySelector(`input[name*="${fieldName}"]`);
                if (input) {
                    const helpText = document.createElement('div');
                    helpText.className = 'form-text text-muted';
                    helpText.textContent = fieldHelp[fieldName];
                    
                    const parent = input.parentNode;
                    parent.appendChild(helpText);
                }
            }
        }
    </script>
</body>
</html>